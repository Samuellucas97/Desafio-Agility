name: CI/CD to Azure Cloud provider

#  Será executada as atividade abaixo sempre que foi submetido um push ou pull request a branch master
# ou de forma manual
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    
jobs:
  build-test:
      # Sistema operacional para qual será criada a build
      runs-on: ubuntu-latest
      
      steps:
        # Nesse passo é permitido que o workflow tenha acesso ao repositório contendo a aplicação
        - name: Check out the repo
          uses: actions/checkout@v2

        # Configurando o Python
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.6

        # - name: Running test's application (Not implemented)
        #   run: pytest
        
        - name: Set up QEMU (processor emulator)
          uses: docker/setup-qemu-action@v1

        - name: Docker Buildx
          uses: docker/setup-buildx-action@v1  

        # Nesse passo estou logando na minha conta do Dockerhub
        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        # Entiquetando a versão 
        - name: Bump version and push tag
          id: tagging
          uses: mathieudutour/github-tag-action@v4.5
          with: 
            github_token: ${{ secrets.GITHUB_TOKEN }}

        # Empacotando a build e subindo para o docker hub
        - name: Build and Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            push: true
            context: .
            file: ./app/Dockerfile
            platforms: linux/amd64
            tags: samuel1797/desafio-agility:${{ steps.tagging.outputs.new_version }}
            
  # infra:
  #   needs: build-test
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}/terraform

  #   env:
  #     ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
  #     ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
  #     ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
  #     ARM_TENANT_ID: ${{ secrets.TF_ARM_TENNANT_ID }}

  #   steps:
  #     - uses: actions/checkout@v2

  #     # Instalando e configurando o Terraform
  #     - name: Install and setting Terraform
  #       uses: hashicorp/setup-terraform@v1

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Plan
  #       run: terraform plan

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
  
  # deploy-app:
  #   needs: infra
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}/k8s

  #   steps:
  #     - uses: actions/checkout@v2
      
  #     # Set the target Azure Kubernetes Service (AKS) cluster. 
  #     - uses: azure/aks-set-context@v1
  #       with:
  #         creds: '${{ secrets.AZURE_CREDENTIALS }}'
  #         cluster-name: ${{ env.CLUSTER_NAME }}
  #         resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      
  #     # Create namespace if doesn't exist
  #     - run: |
  #         kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
        
  #     # Deploy app to AKS
  #     - uses: azure/k8s-deploy@v1
  #       with:
  #           manifests: |
  #             manifests/deployment.yml
  #             manifests/service.yml
  #           images: |
  #             ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
  #           namespace: ${{ env.NAMESPACE }}
          